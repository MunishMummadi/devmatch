package services

import (
	"context"
	"fmt"
	"log"
	"gin/internal/config"

	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

// GeminiService handles interactions with the Google Gemini API.
type GeminiService struct {
	client *genai.Client
	cfg    *config.Config
}

// NewGeminiService creates a new instance of GeminiService.
// It requires the Gemini API Key to be present in the config.
func NewGeminiService(cfg *config.Config) (*GeminiService, error) {
	if cfg.GeminiAPIKey == "" {
		log.Println("Gemini API Key not configured. GeminiService will not be functional.")
		// Return a service instance that won't work, or return an error
		// Returning error is generally safer to prevent unexpected failures later.
		return nil, fmt.Errorf("Gemini API Key is missing from configuration")
	}

	ctx := context.Background()
	client, err := genai.NewClient(ctx, option.WithAPIKey(cfg.GeminiAPIKey))
	if err != nil {
		log.Printf("Failed to create Gemini client: %v", err)
		return nil, fmt.Errorf("failed to create Gemini client: %w", err)
	}
	log.Println("Gemini client initialized successfully.")

	return &GeminiService{
		client: client,
		cfg:    cfg,
	}, nil
}

// Close releases the resources used by the Gemini client.
func (s *GeminiService) Close() {
	if s.client != nil {
		if err := s.client.Close(); err != nil {
			log.Printf("Error closing Gemini client: %v", err)
		}
		log.Println("Gemini client closed.")
	}
}

// AnalyzeText sends text to the Gemini model for analysis (example function).
func (s *GeminiService) AnalyzeText(ctx context.Context, textToAnalyze string) (string, error) {
	if s.client == nil {
		return "", fmt.Errorf("Gemini client is not initialized")
	}

	// Example: Using a specific Gemini model
	// TODO: Make the model name configurable
	model := s.client.GenerativeModel("gemini-1.5-flash") // Or another suitable model

	prompt := genai.Text(fmt.Sprintf("Analyze the following text: %s", textToAnalyze))
	resp, err := model.GenerateContent(ctx, prompt)
	if err != nil {
		log.Printf("Error generating content with Gemini: %v", err)
		return "", fmt.Errorf("failed to generate content: %w", err)
	}

	// Basic extraction of text content from response
	// Note: Gemini responses can be complex (multiple parts, candidates). Proper handling is needed.
	if len(resp.Candidates) > 0 && len(resp.Candidates[0].Content.Parts) > 0 {
		return fmt.Sprintf("%s", resp.Candidates[0].Content.Parts[0]), nil
	} 

	return "", fmt.Errorf("no content generated by Gemini")
}

// Add more Gemini-related functions here as needed.